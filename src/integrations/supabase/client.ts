
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bftuoerxiyocfputahrx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJmdHVvZXJ4aXlvY2ZwdXRhaHJ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5Njg5OTcsImV4cCI6MjA1NzU0NDk5N30.Os1fTswoDdSO41H4N7I4n3P1FWSjHVzB1zS5BiOZrHs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with explicit auth configuration to ensure consistent behavior
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'supabase.auth.token',
      storage: localStorage,
      detectSessionInUrl: true,
      flowType: 'implicit',
    },
    global: {
      fetch: async (url, options = {}) => {
        // Maximum number of retries
        const MAX_RETRIES = 3;
        let retries = 0;
        let lastError;

        while (retries < MAX_RETRIES) {
          try {
            return await fetch(url, options);
          } catch (error) {
            lastError = error;
            retries++;
            console.log(`Fetch attempt ${retries} failed, retrying...`, error);
            // Wait a bit before retrying (exponential backoff)
            await new Promise(resolve => setTimeout(resolve, 500 * Math.pow(2, retries)));
          }
        }

        console.error('Maximum retries reached. Last error:', lastError);
        throw lastError;
      }
    }
  }
);

// Fetch financial configuration based on desarrollo_id
// If desarrollo_id is null, it will fetch the global configuration (id=1)
export const fetchFinancialConfig = async (desarrolloId?: string) => {
  try {
    let query = supabase
      .from('configuracion_financiera')
      .select('*');
    
    if (desarrolloId) {
      // Try to get desarrollo-specific config first
      const { data, error } = await query.eq('desarrollo_id', desarrolloId).maybeSingle();
      
      if (error) {
        console.error('Error fetching development financial configuration:', error);
        // Fall back to global config
        return fetchFinancialConfig();
      }
      
      if (data) {
        // Add missing properties with default values
        return {
          ...data,
          es_gastos_fijos_porcentaje: false,
          es_gastos_variables_porcentaje: true,
          es_impuestos_porcentaje: true
        };
      }
      
      // If no specific config exists, fall back to global config
      return fetchFinancialConfig();
    } else {
      // Get global config
      const { data, error } = await query.eq('id', 1).maybeSingle();
      
      if (error) {
        console.error('Error fetching global financial configuration:', error);
        throw error;
      }
      
      if (data) {
        // Add missing properties with default values
        return {
          ...data,
          es_gastos_fijos_porcentaje: false,
          es_gastos_variables_porcentaje: true,
          es_impuestos_porcentaje: true
        };
      }
      
      return null;
    }
  } catch (err) {
    console.error('Error in fetchFinancialConfig:', err);
    throw err;
  }
};
